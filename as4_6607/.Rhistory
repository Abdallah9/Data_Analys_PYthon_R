df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
print('')
print('')
# Step c: Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowsum(select(., starts_with("A") | starts_with("B"))))
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
# Step a: Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# Step b: Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
print('')
print('')
# Step c: Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowsum(select(starts_with("A") | starts_with("B"))))
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
# Step a: Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# Step b: Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
print('')
print('')
# Step c: Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowsum(select("A", "B")))
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
# Step a: Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# Step b: Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
print('')
print('')
# Step c: Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., where(is.numeric))))
# Step d: Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
# c. Calculate an additional column for total sales across all products
# df_transform <- df_transform %>%
#    mutate(Total_Sales = rowSums(select(., where(is.numeric))))
df_sum <- df_transform %>%
group_by("A", "b") %>%
summarise(TotalValue = sum(Value, na.rm = TRUE))
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
# c. Calculate an additional column for total sales across all products
# df_transform <- df_transform %>%
#    mutate(Total_Sales = rowSums(select(., where(is.numeric))))
df_sum <- df_transform %>%
group_by("A", "B") %>%
summarise(TotalValue = sum(Value, na.rm = TRUE))
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
# c. Calculate an additional column for total sales across all products
# df_transform <- df_transform %>%
#    mutate(Total_Sales = rowSums(select(., where(is.numeric))))
df_sum <- df_transform %>%
group_by(A, B) %>%
summarise(TotalValue = sum(Value, na.rm = TRUE))
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
# c. Calculate an additional column for total sales across all products
# df_transform <- df_transform %>%
#    mutate(Total_Sales = rowSums(select(., where(is.numeric))))
df_sum <- df_transform %>%
summarise(
Sum_A = sum(A, na.rm = TRUE),
Sum_B = sum(B, na.rm = TRUE)
)
print(df_sum)
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
# c. Calculate an additional column for total sales across all products
# df_transform <- df_transform %>%
#    mutate(Total_Sales = rowSums(select(., where(is.numeric))))
df_transform <- df_transform %>%
summarise(
Sum_A = sum(A, na.rm = TRUE),
Sum_B = sum(B, na.rm = TRUE)
)
print(df_sum)
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., where(is.numeric))))
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
head(df)
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., where(is.numeric))))
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
head(df)
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
print(df)
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., where(is.numeric))))
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
head(df)
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
print(df)
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = list(Sales = 0))
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., -c(Month, Region))))
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
head(df)
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
print(df)
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = 0) #list(Sales = 0)
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., -c(Month, Region))))
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
head(df)
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
print(df)
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = 0) #list(Sales = 0)
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., -c(Month, Region))))
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
head(df)
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
print(df)
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = 0) #list(Sales = 0)
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., -c(Month, Region))))
print(dt_transform)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
head(df)
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
print(df)
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = 0) #list(Sales = 0)
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., -c(Month, Region))))
print(df_transform)
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
head(df)
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
print(df)
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = 0) #list(Sales = 0)
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., -c(Month, Region))))
print(df_transform)
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
print(average_total_sales)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Read in the CSV file
df <- read.csv("messy_sales_data.csv")
head(df)
# a. Separate the Product.Region column into Product and Region
df <- df %>%
separate(Product.Region, into = c("Product", "Region"), sep = "\\.")
print(df)
# b. Transform the dataset so that each Product becomes a column
# Summarize sales by Month and Region
df_transform <- df %>%
pivot_wider(names_from = Product, values_from = Sales, values_fill = 0) #list(Sales = 0)
print(df_transform)
# c. Calculate an additional column for total sales across all products
df_transform <- df_transform %>%
mutate(Total_Sales = rowSums(select(., -c(Month, Region))))
print(df_transform)
# d. Filter rows where total sales exceed the average total sales
average_total_sales <- mean(df_transform$Total_Sales)
df_filtered <- df_transform %>%
filter(Total_Sales > average_total_sales)
print(df_filtered)
# Step e: Sort the resulting dataset by Month and Region
df_sorted <- df_filtered %>%
arrange(Month, Region)
# Write the tidy dataset to a CSV file
write.csv(df_sorted, "tidy_sales_data.csv", row.names = FALSE)
# Print the sorted dataframe
print(df_sorted)
# Load the required libraries
library(ggplot2)
library(dplyr)
# Load the dataset from the URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
#
# Determine the top three genres
top_genres <- movies %>%
group_by(genre) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(3) %>%
pull(genre)
# Filter the dataset to only include the top three genres
filtered_movies <- movies %>% filter(genre %in% top_genres)
# Step 4a: Plot side-by-side histograms of movie scores for the top three genres
ggplot(filtered_movies, aes(x = score, fill = genre)) +
geom_histogram(alpha = 0.6, position = "identity", bins = 20) +
labs(title = "Side-by-Side Histograms of Movie Scores for Top Three Genres",
x = "Movie Score", y = "Frequency") +
scale_fill_discrete(name = "Genre") +
theme_minimal()
# Step 4b: Plot side-by-side boxplots of movie scores for the top three genres
ggplot(filtered_movies, aes(x = genre, y = score, fill = genre)) +
geom_boxplot() +
labs(title = "Boxplots of Movie Scores for Top Three Genres",
x = "Genre", y = "Movie Score") +
scale_fill_discrete(name = "Genre") +
theme_minimal()
# 1. Read the CSV file into an object called intenseData
intenseData <- read.csv("/mnt/data/ex12_normalized_intensities.csv")
# 1. Read the CSV file into an object called intenseData
intenseData <- read.csv("ex12_normalized_intensities.csv")
# 2. Create a scatter plot with ggplot2
library(ggplot2)
# Creating a simple scatter plot of sampleB on the x-axis and sampleH on the y-axis
p <- ggplot(intenseData, aes(x = sampleB, y = sampleH)) +
geom_point() +
labs(title = "Scatter plot of sampleB vs sampleH",
x = "sampleB",
y = "sampleH")
# Display the initial scatter plot
print(p)
# 3. Add a new column called expr_limits
intenseData$expr_limits <- ifelse(intenseData$sampleB > 13 & intenseData$sampleH > 13,
"high",
ifelse(intenseData$sampleB < 6 & intenseData$sampleH < 6,
"low",
"normal"))
# 4. Modify the plot to color points by expr_limits
p <- ggplot(intenseData, aes(x = sampleB, y = sampleH, color = expr_limits)) +
geom_point() +
labs(title = "Scatter plot of sampleB vs sampleH with expr_limits coloring",
x = "sampleB",
y = "sampleH")
# Display the modified scatter plot
print(p)
# 5. Add a layer to change point colors to blue, grey, and red
p2 <- p + scale_color_manual(values = c("low" = "blue", "normal" = "grey", "high" = "red"))
# Display the final scatter plot
print(p2)
# 6. Save the final plot to a PDF file
ggsave("scatter_plot_expr_limits.pdf", plot = p2)
# 1. Read the CSV file into an object called intenseData
intenseData <- read.csv("ex12_normalized_intensities.csv")
# 2. Create a scatter plot with ggplot2
library(ggplot2)
# Creating a simple scatter plot of sampleB on the x-axis and sampleH on the y-axis
p <- ggplot(intenseData, aes(x = sampleB, y = sampleH)) +
geom_point() +
labs(title = "Scatter plot of sampleB vs sampleH",
x = "sampleB",
y = "sampleH")
# Display the initial scatter plot
print(p)
# 3. Add a new column called expr_limits
intenseData$expr_limits <- ifelse(intenseData$sampleB > 13 & intenseData$sampleH > 13,
"high",
ifelse(intenseData$sampleB < 6 & intenseData$sampleH < 6,
"low", "normal"))
# 4. Modify the plot to color points by expr_limits
p <- ggplot(intenseData, aes(x = sampleB, y = sampleH, color = expr_limits)) +
geom_point() +
labs(title = "Scatter plot of sampleB vs sampleH with expr_limits coloring",
x = "sampleB",
y = "sampleH")
# Display the modified scatter plot
print(p)
# 5. Add a layer to change point colors to blue, grey, and red
p2 <- p + scale_color_manual(values = c("low" = "blue", "normal" = "grey", "high" = "red"))
# Display the final scatter plot
print(p2)
# 6. Save the final plot to a PDF file
ggsave("scatter_plot_expr_limits.pdf", plot = p2)
# Install and load the reticulate package
install.packages("reticulate")
# Load reticulate
library(reticulate)
# Install Python package (e.g., numpy)
py_install("numpy")
install.packages("reticulate")
