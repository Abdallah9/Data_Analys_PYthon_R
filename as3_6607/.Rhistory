# # Filter out rows with missing or zero values for city_density or metro_density to avoid issues with log scales
# filtered_cities <- cities %>%
#   filter(!is.na(city_density), !is.na(metro_density), city_density > 0, metro_density > 0)
#
# # Create the plot
# ggplot(filtered_cities, aes(x = city_density, y = metro_density, label = name)) +
#   geom_point(alpha = 0.7) +
#   geom_text_repel(size = 3, alpha = 0.7) +
#   scale_x_log10() +
#   scale_y_log10() +
#   theme_minimal() +
#   labs(title = "City Density vs Metro Density (Log Scale)",
#        x = "City Density (per 1000 sq km, log scale)",
#        y = "Metro Density (per sq km, log scale)")
# f. Create a scatter plot with a regression line and facet it by Region
ggplot(economist_data, aes(x = Percent.of.15plus.with.bank.account, y = SEDA.Current.level, color = Region)) +
geom_point() +
# Overlay a regression line (method = "lm" for linear regression)
geom_smooth(method = "lm", se = FALSE) +
facet_wrap(~ Region) +  # Facet the plot by Region
theme_minimal() +
labs(title = "Scatter Plot of Bank Account Ownership vs SEDA Score Faceted by Region",
x = "Percent of People (15+) with Bank Account",
y = "SEDA Current Level")
# e. Create a scatter plot with a regression line overlaid
ggplot(economist_data, aes(x = Percent.of.15plus.with.bank.account, y = SEDA.Current.level, color = Region)) +
geom_point() +
# Overlay a regression line (method = "lm" for linear regression)
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
labs(title = "Scatter Plot with Regression Line",
x = "Percent of People (15+) with Bank Account",
y = "SEDA Current Level")
# Load necessary libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# Load libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# b. Keep only the specified columns in `movies.sub`
movies.sub <- movies.sub %>%
select(name, director, year, country, genre, budget, gross, score)
# Display first few rows of the modified subset
head(movies.sub)
# Load libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# b. Keep only the specified columns in `movies.sub`
movies.sub <- movies.sub %>%
select(name, director, year, country, genre, budget, gross, score)
# Display first few rows of the modified subset
head(movies.sub)
# c. Calculate the profit for each movie in `movies.sub` as a fraction of its budget
movies.sub <- movies.sub %>%
mutate(
# Convert `budget` to million dollars and round to 1 decimal place
budget = round(budget / 1e6, 1),
# Convert `gross` to million dollars and round to 1 decimal place
gross = round(gross / 1e6, 1),
# Calculate profit as a fraction of the budget
profit_fraction = (gross - budget) / budget
)
# Display first few rows with profit calculation
head(movies.sub)
# Load libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# b. Keep only the specified columns in `movies.sub`
movies.sub <- movies.sub %>%
select(name, director, year, country, genre, budget, gross, score)
# Display first few rows of the modified subset
head(movies.sub)
# c. Calculate the profit for each movie in `movies.sub` as a fraction of its budget
movies.sub <- movies.sub %>%
mutate(
# Convert `budget` to million dollars and round to 1 decimal place
budget = round(budget / 1e6, 1),
# Convert `gross` to million dollars and round to 1 decimal place
gross = round(gross / 1e6, 1),
# Calculate profit as a fraction of the budget
profit_fraction = (gross - budget) / budget
)
# Display first few rows with profit calculation
head(movies.sub)
# d. Count the number of movies produced by each genre and order them in descending order
genre_count <- movies.sub %>%
group_by(genre) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display the genre count
print(genre_count)
# Load libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# b. Keep only the specified columns in `movies.sub`
movies.sub <- movies.sub %>%
select(name, director, year, country, genre, budget, gross, score)
# Display first few rows of the modified subset
head(movies.sub)
# c. Calculate the profit for each movie in `movies.sub` as a fraction of its budget
movies.sub <- movies.sub %>%
mutate(
# Convert `budget` to million dollars and round to 1 decimal place
budget = round(budget / 1e6, 1),
# Convert `gross` to million dollars and round to 1 decimal place
gross = round(gross / 1e6, 1),
# Calculate profit as a fraction of the budget
profit_fraction = (gross - budget) / budget
)
# Display first few rows with profit calculation
head(movies.sub)
# d. Count the number of movies produced by each genre and order them in descending order
genre_count <- movies.sub %>%
group_by(genre) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display the genre count
print(genre_count)
# Group the `movies.sub` dataset by `country` and `genre`, then calculate the required metrics
movies_grouped <- movies.sub %>%
group_by(country, genre) %>%
summarise(
# Count the number of movies in each group
count = n(),
# Median of profit as a fraction of budget
median_profit_fraction = median(profit_fraction, na.rm = TRUE),
# Mean of the movie score
mean_score = mean(score, na.rm = TRUE),
# Variance of the movie score
variance_score = var(score, na.rm = TRUE)
)
# %>%
#   # Arrange by count in descending order
#   arrange(desc(count))
# Display the result
print(movies_grouped)
# Load libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# b. Keep only the specified columns in `movies.sub`
movies.sub <- movies.sub %>%
select(name, director, year, country, genre, budget, gross, score)
# Display first few rows of the modified subset
head(movies.sub)
# c. Calculate the profit for each movie in `movies.sub` as a fraction of its budget
movies.sub <- movies.sub %>%
mutate(
# Convert `budget` to million dollars and round to 1 decimal place
budget = round(budget / 1e6, 1),
# Convert `gross` to million dollars and round to 1 decimal place
gross = round(gross / 1e6, 1),
# Calculate profit as a fraction of the budget
profit_fraction = (gross - budget) / budget
)
# Display first few rows with profit calculation
head(movies.sub)
# d. Count the number of movies produced by each genre and order them in descending order
genre_count <- movies.sub %>%
group_by(genre) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display the genre count
print(genre_count)
# Group the `movies.sub` dataset by `country` and `genre`, then calculate the required metrics
movies_grouped <- movies.sub %>%
group_by(country, genre) %>%
summarise(
# Count the number of movies in each group
count = n(),
# Median of profit as a fraction of budget
median_profit_fraction = median(profit_fraction, na.rm = TRUE),
# Mean of the movie score
mean_score = mean(score, na.rm = TRUE),
# Variance of the movie score
variance_score = var(score, na.rm = TRUE)
) %>%
# Arrange by count in descending order
arrange(desc(count))
# Display the result
print(movies_grouped)
# Load libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# b. Keep only the specified columns in `movies.sub`
movies.sub <- movies.sub %>%
select(name, director, year, country, genre, budget, gross, score)
# Display first few rows of the modified subset
head(movies.sub)
# c. Calculate the profit for each movie in `movies.sub` as a fraction of its budget
movies.sub <- movies.sub %>%
mutate(
# Convert `budget` to million dollars and round to 1 decimal place
budget = round(budget / 1e6, 1),
# Convert `gross` to million dollars and round to 1 decimal place
gross = round(gross / 1e6, 1),
# Calculate profit as a fraction of the budget
profit_fraction = (gross - budget) / budget
)
# Display first few rows with profit calculation
head(movies.sub)
# d. Count the number of movies produced by each genre and order them in descending order
genre_count <- movies.sub %>%
group_by(genre) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display the genre count
print(genre_count)
# Group the `movies.sub` dataset by `country` and `genre`, then calculate the required metrics
movies_grouped <- movies.sub %>%
group_by(country, genre) %>%
summarise(
# Count the number of movies in each group
count = n(),
# Median of profit as a fraction of budget
median_profit_fraction = median(profit_fraction, na.rm = TRUE),
# Mean of the movie score
mean_score = mean(score, na.rm = TRUE),
# Variance of the movie score
variance_score = var(score, na.rm = TRUE)
)
# Display the result
print(movies_grouped)
# Load libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# b. Keep only the specified columns in `movies.sub`
movies.sub <- movies.sub %>%
select(name, director, year, country, genre, budget, gross, score)
# Display first few rows of the modified subset
head(movies.sub)
# c. Calculate the profit for each movie in `movies.sub` as a fraction of its budget
movies.sub <- movies.sub %>%
mutate(
# Convert `budget` to million dollars and round to 1 decimal place
budget = round(budget / 1e6, 1),
# Convert `gross` to million dollars and round to 1 decimal place
gross = round(gross / 1e6, 1),
# Calculate profit as a fraction of the budget
profit_fraction = (gross - budget) / budget
)
# Display first few rows with profit calculation
head(movies.sub)
# d. Count the number of movies produced by each genre and order them in descending order
genre_count <- movies.sub %>%
group_by(genre) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display the genre count
print(genre_count)
# Group the `movies.sub` dataset by `country` and `genre`, then calculate the required metrics
movies_grouped <- movies.sub %>%
group_by(country, genre) %>%
summarise(
# Count the number of movies in each group
count = n(),
# Median of profit as a fraction of budget
median_profit_fraction = median(profit_fraction, na.rm = TRUE),
# Mean of the movie score
mean_score = mean(score, na.rm = TRUE),
# Variance of the movie score
variance_score = var(score, na.rm = TRUE)
)
# Display the result
print(movies_grouped)
# Load libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# b. Keep only the specified columns in `movies.sub`
movies.sub <- movies.sub %>%
select(name, director, year, country, genre, budget, gross, score)
# Display first few rows of the modified subset
head(movies.sub)
# c. Calculate the profit for each movie in `movies.sub` as a fraction of its budget
movies.sub <- movies.sub %>%
mutate(
# Convert `budget` to million dollars and round to 1 decimal place
budget = round(budget / 1e6, 1),
# Convert `gross` to million dollars and round to 1 decimal place
gross = round(gross / 1e6, 1),
# Calculate profit as a fraction of the budget
profit_fraction = (gross - budget) / budget
)
# Display first few rows with profit calculation
head(movies.sub)
# d. Count the number of movies produced by each genre and order them in descending order
genre_count <- movies.sub %>%
group_by(genre) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display the genre count
print(genre_count)
# Group the `movies.sub` dataset by `country` and `genre`, then calculate the required metrics
movies_grouped <- movies.sub %>%
group_by(country, genre) %>%
summarise(
# Count the number of movies in each group
count = n(),
# Median of profit as a fraction of budget
median_profit_fraction = median(profit_fraction, na.rm = TRUE),
# Mean of the movie score
mean_score = mean(score, na.rm = TRUE),
# Variance of the movie score
variance_score = var(score, na.rm = TRUE),
.groups = "drop"
) %>%
# Arrange by count in descending order
arrange(desc(count))
# Display the result
print(movies_grouped)
# Load libraries
library(dplyr)
# Load the dataset from the given URL
url <- "https://raw.githubusercontent.com/Juanets/movie-stats/master/movies.csv"
movies <- read.csv(url)
# a. Find a subset of the movies produced after 2005
movies.sub <- movies %>%
filter(year > 2005)
# Display first few rows of the subset
head(movies.sub)
# b. Keep only the specified columns in `movies.sub`
movies.sub <- movies.sub %>%
select(name, director, year, country, genre, budget, gross, score)
# Display first few rows of the modified subset
head(movies.sub)
# c. Calculate the profit for each movie in `movies.sub` as a fraction of its budget
movies.sub <- movies.sub %>%
mutate(
# Convert `budget` to million dollars and round to 1 decimal place
budget = round(budget / 1e6, 1),
# Convert `gross` to million dollars and round to 1 decimal place
gross = round(gross / 1e6, 1),
# Calculate profit as a fraction of the budget
profit_fraction = (gross - budget) / budget
)
# Display first few rows with profit calculation
head(movies.sub)
# d. Count the number of movies produced by each genre and order them in descending order
genre_count <- movies.sub %>%
group_by(genre) %>%
summarise(count = n()) %>%
arrange(desc(count))
# Display the genre count
print(genre_count)
# Group the `movies.sub` dataset by `country` and `genre`, then calculate the required metrics
movies_grouped <- movies.sub %>%
group_by(country, genre) %>%
summarise(
# Count the number of movies in each group
count = n(),
# Median of profit as a fraction of budget
median_profit_fraction = median(profit_fraction, na.rm = TRUE),
# Mean of the movie score
mean_score = mean(score, na.rm = TRUE),
# Variance of the movie score
variance_score = var(score, na.rm = TRUE),
# Drop the grouping after summarizing
.groups = "drop"
) %>%
# Arrange by count in descending order
arrange(desc(count))
# Display the result
print(movies_grouped)
# library(dplyr)
movies_filtered <- movies %>%
# Filter movies produced after 2001
filter(year > 2001) %>%
# Calculate the number of movies for each director and
# filter out those with fewer than 4 movies
group_by(director) %>%
filter(n() >= 4) %>%
ungroup() %>%
# Group by genre and director, then calculate the mean score for each director
group_by(genre, director) %>%
summarise(mean_score = mean(score, na.rm = TRUE)) %>%
ungroup() %>%
# Step 4: For each genre, select the top two directors with the highest mean scores
group_by(genre) %>%
top_n(n = 2, wt = mean_score) %>%
# Arrange by genre and descending mean score for clarity
arrange(genre, desc(mean_score)) %>%
ungroup()
# Display the result
print(movies_filtered)
# library(dplyr)
movies_filtered <- movies %>%
# Filter movies produced after 2001
filter(year > 2001) %>%
# Calculate the number of movies for each director and
# filter out those with fewer than 4 movies
group_by(director) %>%
filter(n() >= 4) %>%
ungroup() %>%
# Group by genre and director, then calculate the mean score for each director
group_by(genre, director) %>%
summarise(mean_score = mean(score, na.rm = TRUE)) %>%
ungroup() %>%
# Step 4: For each genre, select the top two directors with the highest mean scores
group_by(genre) %>%
top_n(n = 2, wt = mean_score) %>%
# Arrange by genre and descending mean score for clarity
arrange(genre, desc(mean_score)) %>%
ungroup()
.groups = "drop"
# Display the result
print(movies_filtered)
# library(dplyr)
movies_filtered <- movies %>%
# Filter movies produced after 2001
filter(year > 2001) %>%
# Calculate the number of movies for each director and
# filter out those with fewer than 4 movies
group_by(director) %>%
filter(n() >= 4) %>%
ungroup() %>%
# Group by genre and director, then calculate the mean score for each director
group_by(genre, director) %>%
summarise(mean_score = mean(score, na.rm = TRUE, .groups = "drop")) %>%
ungroup() %>%
# Step 4: For each genre, select the top two directors with the highest mean scores
group_by(genre) %>%
top_n(n = 2, wt = mean_score) %>%
# Arrange by genre and descending mean score for clarity
arrange(genre, desc(mean_score)) %>%
ungroup()
.groups = "drop"
# Display the result
print(movies_filtered)
# library(dplyr)
movies_filtered <- movies %>%
# Filter movies produced after 2001
filter(year > 2001) %>%
# Calculate the number of movies for each director and
# filter out those with fewer than 4 movies
group_by(director) %>%
filter(n() >= 4) %>%
ungroup() %>%
# Group by genre and director, then calculate the mean score for each director
group_by(genre, director) %>%
summarise(mean_score = mean(score, na.rm = TRUE), .groups = "drop") %>%
ungroup() %>%
# Step 4: For each genre, select the top two directors with the highest mean scores
group_by(genre) %>%
top_n(n = 2, wt = mean_score) %>%
# Arrange by genre and descending mean score for clarity
arrange(genre, desc(mean_score)) %>%
ungroup()
.groups = "drop"
# Display the result
print(movies_filtered)
