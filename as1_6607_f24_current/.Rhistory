library(reticulate)
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
mean = 23
sigma_squared = 3.6
sigma = np.sqrt(sigma_squared)
n_samples = 10
n_simulations = 10000
# (2) Generate a sample of size 10 from the Normal distribution
# with parameters μ = 23 and σ2 = 3.6 and the compute the sum
# of the generated observations
sample = np.random.normal(mean, sigma, n_samples)
sample_sum = np.sum(sample)
print(f"Sum of a single generated sample of size 10: {sample_sum}")
# (3) Simulate 10000 times part (2) and compute the sum
#of the generated samples of size 10
samples = []
for _ in range(n_simulations):
sample = np.random.normal(mean, sigma, n_samples)
samples.append(sample)
# (4) Compute the sums of the generated samples of size 10
sample_sums = [np.sum(sample) for sample in samples]
# Convert list to numpy array
sample_sums = np.array(sample_sums)
# (4) Plot the histogram of the 10000 observed statistics from part (3).
# Then show the density curve of the theoretical distribution you
# found in part (1) on the histogram.
plt.hist(sample_sums, bins=50, density=True, alpha=0.6, color='g', label='Simulated Sums')
# Overlay the theoretical density curve
x = np.linspace(min(sample_sums), max(sample_sums), 10000)
th_mean = 10 * mean
th_variance = 10 * sigma_squared
th_std = np.sqrt(th_variance)
th_pdf = stats.norm.pdf(x, th_mean, th_std)
plt.plot(x, th_pdf, 'r-', lw=2, label='Theoretical Density')
# Adding labels and legend
plt.xlabel('Sum of 10 Samples')
plt.ylabel('Density')
plt.title('Histogram of Sample Sums vs Theoretical Distribution')
plt.legend()
plt.grid(True)
plt.show()
# - We observe that the histogram of the 10,000 sample sums closely
# matches the theoretical normal distribution curve with mean 10 * mu and variance 10 * sigma_squared.
# This indicates that the observed distribution aligns well with the theoretical distribution, as expected.
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
mean = 23
sigma_squared = 3.6
sigma = np.sqrt(sigma_squared)
n_samples = 10
n_simulations = 10000
# (2) Generate a sample of size 10 from the Normal distribution
# with parameters mean = 23 and sigma_squared = 3.6 and the compute the sum
# of the generated observations
sample = np.random.normal(mean, sigma, n_samples)
sample_sum = np.sum(sample)
print(f"Sum of a single generated sample of size 10: {sample_sum}")
# (3) Simulate 10000 times part (2) and compute the sum
#of the generated samples of size 10
samples = []
for _ in range(n_simulations):
sample = np.random.normal(mean, sigma, n_samples)
samples.append(sample)
# Compute the sums of the generated samples of size 10
sample_sums = [np.sum(sample) for sample in samples]
# Convert list to numpy array
sample_sums = np.array(sample_sums)
# (4) Plot the histogram of the 10000 observed statistics from part (3).
# Then show the density curve of the theoretical distribution you
# found in part (1) on the histogram.
plt.hist(sample_sums, bins=50, density=True, alpha=0.6, color='g', label='Simulated Sums')
# Overlay the theoretical density curve
x = np.linspace(min(sample_sums), max(sample_sums), 10000)
th_mean = 10 * mean
th_variance = 10 * sigma_squared
th_std = np.sqrt(th_variance)
th_pdf = stats.norm.pdf(x, th_mean, th_std)
plt.plot(x, th_pdf, 'r-', lw=2, label='Theoretical Density')
# Adding labels and legend
plt.xlabel('Sum of 10 Samples')
plt.ylabel('Density')
plt.title('Histogram of Sample Sums vs Theoretical Distribution')
plt.legend()
plt.grid(True)
plt.show()
# - We observe that the histogram of the 10,000 sample sums closely
# matches the theoretical normal distribution curve with mean 10 * mu and variance 10 * sigma_squared.
# This indicates that the observed distribution aligns well with the theoretical distribution, as expected.
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
mean = 23
sigma_squared = 3.6
sigma = np.sqrt(sigma_squared)
n_samples = 10
n_simulations = 10000
# (2) Generate a sample of size 10 from the Normal distribution
# with parameters mean = 23 and sigma_squared = 3.6 and the compute the sum
# of the generated observations
sample = np.random.normal(mean, sigma, n_samples)
sample_sum = np.sum(sample)
print(f"Sum of a single generated sample of size 10: {sample_sum}")
# (3) Simulate 10000 times part (2) and compute the sum
#of the generated samples of size 10
samples = []
for _ in range(n_simulations):
sample = np.random.normal(mean, sigma, n_samples)
samples.append(sample)
# Compute the sums of the generated samples of size 10
sample_sums = [np.sum(sample) for sample in samples]
# Convert list to numpy array
# sample_sums = np.array(sample_sums)
# (4) Plot the histogram of the 10000 observed statistics from part (3).
# Then show the density curve of the theoretical distribution you
# found in part (1) on the histogram.
plt.hist(sample_sums, bins=50, density=True, alpha=0.6, color='g', label='Simulated Sums')
# Overlay the theoretical density curve
x = np.linspace(min(sample_sums), max(sample_sums), 10000)
th_mean = 10 * mean
th_variance = 10 * sigma_squared
th_std = np.sqrt(th_variance)
th_pdf = stats.norm.pdf(x, th_mean, th_std)
plt.plot(x, th_pdf, 'r-', lw=2, label='Theoretical Density')
# Adding labels and legend
plt.xlabel('Sum of 10 Samples')
plt.ylabel('Density')
plt.title('Histogram of Sample Sums vs Theoretical Distribution')
plt.legend()
plt.grid(True)
plt.show()
# - We observe that the histogram of the 10,000 sample sums closely
# matches the theoretical normal distribution curve with mean 10 * mu and variance 10 * sigma_squared.
# This indicates that the observed distribution aligns well with the theoretical distribution, as expected.
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
mean = 23
sigma_squared = 3.6
sigma = np.sqrt(sigma_squared)
n_samples = 10
n_simulations = 10000
# (2) Generate a sample of size 10 from the Normal distribution
# with parameters mean = 23 and sigma_squared = 3.6 and the compute the sum
# of the generated observations
sample = np.random.normal(mean, sigma, n_samples)
sample_sum = np.sum(sample)
# print(f"Sum of a single generated sample of size 10: {sample_sum}")
# (3) Simulate 10000 times part (2) and compute the sum
#of the generated samples of size 10
samples = []
for _ in range(n_simulations):
sample = np.random.normal(mean, sigma, n_samples)
samples.append(sample)
# Compute the sums of the generated samples of size 10
sample_sums = [np.sum(sample) for sample in samples]
# Convert list to numpy array
# sample_sums = np.array(sample_sums)
# (4) Plot the histogram of the 10000 observed statistics from part (3).
# Then show the density curve of the theoretical distribution you
# found in part (1) on the histogram.
plt.hist(sample_sums, bins=50, density=True, alpha=0.6, color='g', label='Simulated Sums')
# Overlay the theoretical density curve
x = np.linspace(min(sample_sums), max(sample_sums), 10000)
th_mean = 10 * mean
th_variance = 10 * sigma_squared
th_std = np.sqrt(th_variance)
th_pdf = stats.norm.pdf(x, th_mean, th_std)
plt.plot(x, th_pdf, 'r-', lw=2, label='Theoretical Density')
# Adding labels and legend
plt.xlabel('Sum of 10 Samples')
plt.ylabel('Density')
plt.title('Histogram of Sample Sums vs Theoretical Distribution')
plt.legend()
plt.grid(True)
plt.show()
# - We observe that the histogram of the 10,000 sample sums closely
# matches the theoretical normal distribution curve with mean 10 * mu and variance 10 * sigma_squared.
# This indicates that the observed distribution aligns well with the theoretical distribution, as expected.
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
mean = 23
sigma_squared = 3.6
sigma = np.sqrt(sigma_squared)
n_samples = 10
n_simulations = 10000
# (2) Generate a sample of size 10 from the Normal distribution
# with parameters mean = 23 and sigma_squared = 3.6 and the compute the sum
# of the generated observations
sample = np.random.normal(mean, sigma, n_samples)
sample_sum = np.sum(sample)
# print(f"Sum of a single generated sample of size 10: {sample_sum}")
# (3) Simulate 10000 times part (2) and compute the sum
#of the generated samples of size 10
samples = []
for _ in range(n_simulations):
sample = np.random.normal(mean, sigma, n_samples)
samples.append(sample)
# Compute the sums of the generated samples of size 10
sample_sums = [np.sum(sample) for sample in samples]
# Convert list to numpy array
# sample_sums = np.array(sample_sums)
# (4) Plot the histogram of the 10000 observed statistics from part (3).
# Then show the density curve of the theoretical distribution you
# found in part (1) on the histogram.
plt.hist(sample_sums, bins=50, density=True, alpha=0.6, color='g', label='Simulated Sums')
# Overlay the theoretical density curve
x = np.linspace(min(sample_sums), max(sample_sums), 10000)
th_mean = 10 * mean
th_variance = 10 * sigma_squared
th_std = np.sqrt(th_variance)
th_pdf = stats.norm.pdf(x, th_mean, th_std)
plt.plot(x, th_pdf, 'r-', lw=2, label='Theoretical Density')
# Adding labels and legend
plt.xlabel('Sum of 10 Samples')
plt.ylabel('Density')
plt.title('Histogram of Sample Sums vs Theoretical Distribution')
plt.legend()
plt.grid(True)
plt.show()
# - We observe that the histogram of the 10,000 sample sums closely
# matches the theoretical normal distribution curve with mean 10 * mu and variance 10 * sigma_squared.
# This indicates that the observed distribution aligns well with the theoretical distribution, as expected.
import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
mean = 23
sigma_squared = 3.6
sigma = np.sqrt(sigma_squared)
n_samples = 10
n_simulations = 10000
# (2) Generate a sample of size 10 from the Normal distribution
# with parameters mean = 23 and sigma_squared = 3.6 and the compute the sum
# of the generated observations
sample = np.random.normal(mean, sigma, n_samples)
sample_sum = np.sum(sample)
print(f"Sum of a single generated sample of size 10: {sample_sum}")
# (3) Simulate 10000 times part (2) and compute the sum
#of the generated samples of size 10
samples = []
for _ in range(n_simulations):
sample = np.random.normal(mean, sigma, n_samples)
samples.append(sample)
# Compute the sums of the generated samples of size 10
sample_sums = [np.sum(sample) for sample in samples]
# Convert list to numpy array
# sample_sums = np.array(sample_sums)
# (4) Plot the histogram of the 10000 observed statistics from part (3).
# Then show the density curve of the theoretical distribution you
# found in part (1) on the histogram.
plt.hist(sample_sums, bins=50, density=True, alpha=0.6, color='g', label='Simulated Sums')
# Overlay the theoretical density curve
x = np.linspace(min(sample_sums), max(sample_sums), 10000)
th_mean = 10 * mean
th_variance = 10 * sigma_squared
th_std = np.sqrt(th_variance)
th_pdf = stats.norm.pdf(x, th_mean, th_std)
plt.plot(x, th_pdf, 'r-', lw=2, label='Theoretical Density')
# Adding labels and legend
plt.xlabel('Sum of 10 Samples')
plt.ylabel('Density')
plt.title('Histogram of Sample Sums vs Theoretical Distribution')
plt.legend()
plt.grid(True)
plt.show()
# - We observe that the histogram of the 10,000 sample sums closely
# matches the theoretical normal distribution curve with mean 10 * mu and variance 10 * sigma_squared.
# This indicates that the observed distribution aligns well with the theoretical distribution, as expected.
