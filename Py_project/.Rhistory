"Shape": housing_data.shape,
"Columns": housing_data.columns.tolist(),
"Data Types": housing_data.dtypes,
"Missing Values": housing_data.isnull().sum()
}
for key, value in initial_summary.items():
print(f"{key}:\n{value}\n")
# Address Missing Values
# Fill missing values in the 'total_bedrooms' column with the median value
median_value = housing_data['total_bedrooms'].median()
housing_data['total_bedrooms'] = housing_data['total_bedrooms'].fillna(median_value)
# Generate Descriptive Statistics
numeric_summary = housing_data.describe()
numeric_summary
# Display updated missing values count to confirm resolution
updated_missing_values = housing_data.isnull().sum()
# Printing the updated missing values
updated_missing_values
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.figure(figsize=(10, 8))
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=45)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.show()
# Calculate skewness for numeric columns
skewness = housing_data[numeric_columns].skew()
print("Skewness of Numeric Columns:")
print(skewness)
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.figure(figsize=(10, 8))
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=25)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.show()
# Calculate skewness for numeric columns
skewness = housing_data[numeric_columns].skew()
print("Skewness of Numeric Columns:")
print(skewness)
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.figure(figsize=(12, 10))
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=25)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.show()
# Calculate skewness for numeric columns
skewness = housing_data[numeric_columns].skew()
print("Skewness of Numeric Columns:")
print(skewness)
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.figure(figsize=(12, 7))
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=25)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.show()
# Calculate skewness for numeric columns
skewness = housing_data[numeric_columns].skew()
print("Skewness of Numeric Columns:")
print(skewness)
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.figure(figsize=(12, 7))
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=15)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.show()
# Calculate skewness for numeric columns
skewness = housing_data[numeric_columns].skew()
print("Skewness of Numeric Columns:")
print(skewness)
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.figure(figsize=(8, 4))
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=15)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.show()
# Calculate skewness for numeric columns
skewness = housing_data[numeric_columns].skew()
print("Skewness of Numeric Columns:")
print(skewness)
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.figure(figsize=(12, 8))
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=90)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.show()
# Calculate skewness for numeric columns
skewness = housing_data[numeric_columns].skew()
print("Skewness of Numeric Columns:")
print(skewness)
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.figure(figsize=(12, 8))
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=20)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.show()
# Calculate skewness for numeric columns
skewness = housing_data[numeric_columns].skew()
print("Skewness of Numeric Columns:")
print(skewness)
# Visualize skewness using histograms
for column in numeric_columns:
plt.figure(figsize=(8, 4))
housing_data[column].hist(bins=30, edgecolor='black')
plt.title(f"Histogram of {column} (Skewness: {skewness[column]:.2f})")
plt.xlabel(column)
plt.ylabel("Frequency")
plt.show()
# Highlight highly skewed columns
high_skew = skewness[abs(skewness) > 1]
print("Highly Skewed Columns:")
print(high_skew)
# Step 6: Fix Outliers
# Use the IQR method to handle outliers
for column in numeric_columns:
Q1 = housing_data[column].quantile(0.25)
Q3 = housing_data[column].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
# Capping outliers
housing_data[column] = housing_data[column].apply(lambda x: upper_bound if x > upper_bound else (lower_bound if x < lower_bound else x))
# Recheck boxplots after fixing outliers
plt.figure(figsize=(12, 8))
plt.title("Boxplots for Numeric Columns After Fixing Outliers")
# Generate updated boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=90)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.tight_layout()
plt.show()
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
# plt.figure(figsize=(12, 8))
plt.title("Boxplots for Numeric Columns")
# # Generate boxplots for each numeric column
# housing_data[numeric_columns].boxplot(rot=20)
# plt.xlabel("Numeric Columns")
# plt.ylabel("Values")
# plt.show()
#
# # Calculate skewness for numeric columns
# skewness = housing_data[numeric_columns].skew()
# print("Skewness of Numeric Columns:")
# print(skewness)
# Recheck boxplots after fixing outliers
plt.figure(figsize=(12, 8))
plt.title("Boxplots for Numeric Columns After Fixing Outliers")
# Generate updated boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=90)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.tight_layout()
plt.show()
# Load the dataset
file_path = 'California Housing Prices.csv'
housing_data = pd.read_csv(file_path)
# Inspect the dataset
initial_summary = {
"Shape": housing_data.shape,
"Columns": housing_data.columns.tolist(),
"Data Types": housing_data.dtypes,
"Missing Values": housing_data.isnull().sum()
}
for key, value in initial_summary.items():
print(f"{key}:\n{value}\n")
# Address Missing Values
# Fill missing values in the 'total_bedrooms' column with the median value
median_value = housing_data['total_bedrooms'].median()
housing_data['total_bedrooms'] = housing_data['total_bedrooms'].fillna(median_value)
# Generate Descriptive Statistics
numeric_summary = housing_data.describe()
numeric_summary
# Display updated missing values count to confirm resolution
updated_missing_values = housing_data.isnull().sum()
# Printing the updated missing values
updated_missing_values
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
# plt.figure(figsize=(12, 8))
plt.title("Boxplots for Numeric Columns")
# # Generate boxplots for each numeric column
# housing_data[numeric_columns].boxplot(rot=20)
# plt.xlabel("Numeric Columns")
# plt.ylabel("Values")
# plt.show()
#
# # Calculate skewness for numeric columns
# skewness = housing_data[numeric_columns].skew()
# print("Skewness of Numeric Columns:")
# print(skewness)
# Recheck boxplots after fixing outliers
plt.figure(figsize=(12, 8))
plt.title("Boxplots for Numeric Columns After Fixing Outliers")
# Generate updated boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=90)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.tight_layout()
plt.show()
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
plt.figure(figsize=(12, 8))
plt.title("Boxplots for Numeric Columns")
housing_data[numeric_columns].boxplot(rot=90)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.tight_layout()
plt.show()
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
plt.figure(figsize=(12, 8))
housing_data[numeric_columns].boxplot(rot=90)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.tight_layout()
plt.show()
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
plt.figure(figsize=(12, 8))
housing_data[numeric_columns].boxplot(rot=90)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.tight_layout()
plt.show()
skewness = housing_data[numeric_columns].skew()
print("Skewness of Numeric Columns:")
print(skewness)
# Visualize histograms for numeric columns after fixing outliers
for column in numeric_columns:
plt.figure(figsize=(8, 4))
housing_data[column].hist(bins=30, edgecolor='black')
plt.title(f"Histogram of {column} After Fixing Outliers")
plt.xlabel(column)
plt.ylabel("Frequency")
plt.show()
# Visualize histograms for numeric columns after fixing outliers
for column in numeric_columns:
plt.figure(figsize=(8, 4))
housing_data[column].hist(bins=30, edgecolor='black')
plt.title(f"Histogram of {column} After Fixing Outliers")
plt.xlabel(column)
plt.ylabel("Frequency")
plt.show()
# Step 9: Analyze Relationships Between Features
# Pairplot for visualization of relationships between numeric columns
sns.pairplot(housing_data[numeric_columns], diag_kind="kde", plot_kws={"alpha": 0.5})
plt.show()
# Correlation matrix to understand relationships
correlation_matrix = housing_data[numeric_columns].corr()
print("Correlation Matrix:")
print(correlation_matrix)
# Visualize correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap="coolwarm", cbar=True)
plt.title("Correlation Matrix of Numeric Features")
plt.show()
# Step 10: Analyze Correlation with Housing Prices
# Identify the correlation of each feature with the target variable 'median_house_value'
housing_price_correlation = correlation_matrix['median_house_value'].sort_values(ascending=False)
print("Correlation with Median House Value:")
print(housing_price_correlation)
# Visualize correlations with housing prices
plt.figure(figsize=(8, 6))
housing_price_correlation.drop('median_house_value').plot(kind='bar')
plt.title("Correlation with Median House Value")
plt.xlabel("Features")
plt.ylabel("Correlation Coefficient")
plt.tight_layout()
plt.show()
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
# Step 11: Feature Importance using Linear Regression
# Prepare features and target variable
target = 'median_house_value'
X = housing_data.drop(columns=[target])
y = housing_data[target]
# Encode categorical variables
X = pd.get_dummies(X, drop_first=True)
# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Train linear regression model
model = LinearRegression()
model.fit(X_train, y_train)
# Evaluate model
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
print(f"R-squared: {r2:.2f}")
print(f"Mean Squared Error: {mse:.2f}")
# Feature Importance
feature_importance = pd.Series(model.coef_, index=X.columns).sort_values(ascending=False)
print("Feature Importance:")
print(feature_importance)
# Visualize feature importance
plt.figure(figsize=(12, 8))
feature_importance.plot(kind='bar')
plt.title("Feature Importance based on Linear Regression Coefficients")
plt.xlabel("Features")
plt.ylabel("Coefficient")
plt.tight_layout()
plt.show()
# Step 12: Visualize Regression Residuals
# Calculate residuals
residuals = y_test - y_pred
# Plot residuals distribution
plt.figure(figsize=(8, 6))
sns.histplot(residuals, kde=True, bins=30, color='blue', edgecolor='black')
plt.title("Distribution of Residuals")
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.axvline(0, color='red', linestyle='--', label='Zero Error')
plt.legend()
plt.show()
# Scatter plot of residuals vs. predicted values
plt.figure(figsize=(8, 6))
plt.scatter(y_pred, residuals, alpha=0.5, edgecolor='k')
plt.axhline(0, color='red', linestyle='--', label='Zero Error')
plt.title("Residuals vs. Predicted Values")
plt.xlabel("Predicted Values")
plt.ylabel("Residuals")
plt.legend()
plt.show()
# Insights from Residuals
print("Insights from Residuals:")
print("1. The residuals should be symmetrically distributed around zero.")
print("2. The scatter plot should show no specific patterns (random scatter) if the model fits well.")
print("3. Large residuals might indicate outliers or areas where the model underperforms.")
# Feature Engineering
housing_data['rooms_per_household'] = housing_data['total_rooms'] / housing_data['households']
housing_data['bedrooms_per_room'] = housing_data['total_bedrooms'] / housing_data['total_rooms']
housing_data['population_per_household'] = housing_data['population'] / housing_data['households']
# Scatter Plot: Median House Value vs. Median Income
plt.figure(figsize=(10, 6))
plt.scatter(housing_data['median_income'], housing_data['median_house_value'], alpha=0.5)
plt.title("Median House Value vs. Median Income")
plt.xlabel("Median Income")
plt.ylabel("Median House Value")
plt.grid(True)
plt.show()
# Histogram: Distribution of Median House Value
plt.figure(figsize=(10, 6))
plt.hist(housing_data['median_house_value'], bins=30, edgecolor='k')
plt.title("Distribution of Median House Values")
plt.xlabel("Median House Value")
plt.ylabel("Frequency")
plt.show()
# Correlation Heatmap
plt.figure(figsize=(12, 8))
correlation_matrix = housing_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap of Features")
plt.show()
# Correlation Heatmap
plt.figure(figsize=(12, 8))
correlation_matrix = housing_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap of Features")
plt.show()
# Correlation Heatmap
plt.figure(figsize=(12, 8))
correlation_matrix = housing_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap of Features")
plt.show()
plt.figure(figsize=(12, 8))
numeric_only_data = housing_data.select_dtypes(include=['float64', 'int64'])
correlation_matrix = numeric_only_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap of Features")
plt.show()
# Boxplot: Median House Value by Ocean Proximity
plt.figure(figsize=(10, 6))
sns.boxplot(x='ocean_proximity', y='median_house_value', data=housing_data)
plt.title("Median House Value by Ocean Proximity")
plt.xlabel("Ocean Proximity")
plt.ylabel("Median House Value")
plt.xticks(rotation=45)
plt.show()
# Visualizing Feature Engineering Results
# Histogram: Rooms per Household
plt.figure(figsize=(10, 6))
plt.hist(housing_data['rooms_per_household'], bins=30, edgecolor='k')
plt.title("Distribution of Rooms per Household")
plt.xlabel("Rooms per Household")
plt.ylabel("Frequency")
plt.show()
# Histogram: Bedrooms per Room
plt.figure(figsize=(10, 6))
plt.hist(housing_data['bedrooms_per_room'], bins=30, edgecolor='k')
plt.title("Distribution of Bedrooms per Room")
plt.xlabel("Bedrooms per Room")
plt.ylabel("Frequency")
plt.show()
# Histogram: Population per Household
plt.figure(figsize=(10, 6))
plt.hist(housing_data['population_per_household'], bins=30, edgecolor='k')
plt.title("Distribution of Population per Household")
plt.xlabel("Population per Household")
plt.ylabel("Frequency")
plt.show()
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error
# Load the dataset
file_path = 'California Housing Prices.csv'
housing_data = pd.read_csv(file_path)
# Inspect the dataset
initial_summary = {
"Shape": housing_data.shape,
"Columns": housing_data.columns.tolist(),
"Data Types": housing_data.dtypes,
"Missing Values": housing_data.isnull().sum()
}
for key, value in initial_summary.items():
print(f"{key}:\n{value}\n")
# Address Missing Values
# Fill missing values in the 'total_bedrooms' column with the median value
median_value = housing_data['total_bedrooms'].median()
housing_data['total_bedrooms'] = housing_data['total_bedrooms'].fillna(median_value)
# Generate Descriptive Statistics
numeric_summary = housing_data.describe()
numeric_summary
# Display updated missing values count to confirm resolution
updated_missing_values = housing_data.isnull().sum()
# Printing the updated missing values
updated_missing_values
# Create boxplots for numeric columns
numeric_columns = housing_data.select_dtypes(include=['float64', 'int64']).columns
plt.title("Boxplots for Numeric Columns")
# Generate boxplots for each numeric column
plt.figure(figsize=(12, 8))
housing_data[numeric_columns].boxplot(rot=90)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.tight_layout()
plt.show()
# Step 6: Fix Outliers
# Use the IQR method to handle outliers
for column in numeric_columns:
Q1 = housing_data[column].quantile(0.25)
Q3 = housing_data[column].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
# Capping outliers
housing_data[column] = housing_data[column].apply(lambda x: upper_bound if x > upper_bound else (lower_bound if x < lower_bound else x))
# Recheck boxplots after fixing outliers
plt.figure(figsize=(12, 8))
plt.title("Boxplots for Numeric Columns After Fixing Outliers")
# Generate updated boxplots for each numeric column
housing_data[numeric_columns].boxplot(rot=90)
plt.xlabel("Numeric Columns")
plt.ylabel("Values")
plt.tight_layout()
plt.show()
# Scatter Plot: Median House Value vs. Median Income
plt.figure(figsize=(10, 6))
plt.scatter(housing_data['median_income'], housing_data['median_house_value'], alpha=0.5)
plt.title("Median House Value vs. Median Income")
plt.xlabel("Median Income")
plt.ylabel("Median House Value")
plt.grid(True)
plt.show()
# Histogram: Distribution of Median House Value
plt.figure(figsize=(10, 6))
plt.hist(housing_data['median_house_value'], bins=30, edgecolor='k')
plt.title("Distribution of Median House Values")
plt.xlabel("Median House Value")
plt.ylabel("Frequency")
plt.show()
plt.figure(figsize=(12, 8))
numeric_only_data = housing_data.select_dtypes(include=['float64', 'int64'])
correlation_matrix = numeric_only_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap of Features")
plt.show()
